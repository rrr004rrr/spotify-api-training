import { app, BrowserWindow, ipcMain, net, protocol } from 'electron';
import path from 'path';
import { IClientData } from './type/global.interface';
import fs from 'fs';
import dotenv from 'dotenv';
import url from 'url';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

//#region 各頁面及對應加載的變數名稱(electron forge 預設設定名稱)

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const MUSIC_MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MUSIC_MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

//#endregion

dotenv.config();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

/**主要加載視窗 */
let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 720,
    width: 1280,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // TEMP:跳頁測試
  // setTimeout(() => {
  //   mainWindow.loadURL(MUSIC_MAIN_WINDOW_WEBPACK_ENTRY);
  // }, 3000);

  // If in test mode, open the DevTools.
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }
};

if (app.isPackaged) {
  protocol.registerSchemesAsPrivileged([
    {
      scheme: 'http',
      privileges: {
        secure: true,
        standard: true,
        supportFetchAPI: true, // Add this if you want to use fetch with this protocol.
        // stream: true, // Add this if you intend to use the protocol for streaming i.e. in video/audio html tags.
        // corsEnabled: true, // Add this if you need to enable cors for this protocol.
      },
    },
  ]);

  app.whenReady().then(() => {
    protocol.handle('http', (request) => {
      console.log("protocol", request.url);

      // mainWindow.webContents.send("testPath", "request protocol:" + request.url);

      if (request.url.includes('main_window')) {
        // NOTE: 理論上回傳process.env.REDIRECTURI
        mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + request.url.slice(process.env.REDIRECTURI.length));

        // setTimeout(() => {
        //   mainWindow.webContents.send("testPath", "protocol:" + request.url);
        // }, 3000);

        // Promise<Response>
        return new Promise(() => { });
        // return new Promise<Response>(() => {});
      }
    })
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

/**回傳env資訊 */
ipcMain.handle("getClientData", () => {
  const data: IClientData = {
    clientId: process.env.CLIENTID,
    redirectUri: process.env.REDIRECTURI
  }
  return JSON.stringify(data);
});

/**跳轉頁面功能 */
ipcMain.on('switchPage', (event: Electron.IpcMainEvent, page: string) => {

  mainWindow.webContents.send("testPath", page);

  setTimeout(() => {

    if (page == "main.html") {
      mainWindow.loadURL(MUSIC_MAIN_WINDOW_WEBPACK_ENTRY);
    }
  }, 3000);


  // TODO:要做
  // const exampleFilePath = getFilePath(page);

  // mainWindow.webContents.send("testPath", page);

  // C:\Git\spotify-api-training\out\spotify-api-training-win32-x64\resources\app.asar\src\page\login.html
  // mainWindow.webContents.send("testPath", exampleFilePath);

  // C:\Git\spotify-api-training\out\spotify-api-training-win32-x64\resources\app.asar\.vite\build
  // mainWindow.webContents.send("testPath", __dirname);

});